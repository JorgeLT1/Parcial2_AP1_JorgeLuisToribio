@page "/caja"
@page "/caja/{cajaId:int}"
@inject CajaBLL cajaBLL
@inject ProductoBLL productoBLL
@inject NotificationService Notificacion

<EditForm Model="caja" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="accordion-item">
        <div class="modal-header">
            <h2>Entrada de productos empacados</h2>
        </div>

        @*PRODUCTO ID*@
        <div class="accordion-body">
            <label for="ID">ID</label>
            <div class="input-group">
                <InputNumber @bind-Value="caja.CajaId" class="form-control" />
                <button type="button" class="btn btn-primary" @onclick="Buscar"><span class="oi oi-magnifying-glass"></span></button>
            </div>
            <br>
        @*FECHA*@
        <div class="col-md-15">
            <label for="Fecha">Fecha</label>
            <InputDate @bind-Value="caja.Fecha" class="form-control" format="dd/MM/yyyy" />
            <ValidationMessage For="@(() => caja.Fecha)" />

        </div>
       
        @*Concepto*@
        <div class="col-md-15">
            <br>
            <label for="Concepto">Concepto</label>
            <InputText @bind-Value="caja.Concepto" class="form-control" />
            <ValidationMessage For="@(() => caja.Concepto)" />
            </div>
        </div>

    <div class="accordion-item">
        <div class="modal-header">
            <h2>Utilizados</h2>
        </div>

        @*Producto detalle*@
        <div class="accordion-body">

            @*Producto*@
        <div class="col-md-15">
            <label for="select" class="form-label">Producto:</label>
                    <InputSelect class="form-select" @bind-Value="Detalle.ProductoId">
                        @foreach (Producto item in productoBLL.GetList(o => true))
                        {
                            <option value="@item.ProductoId">@item.Descripcion</option>
                        }
                    </InputSelect>
        </div>

            @*Cantidad*@
         <div class="col-md-15">
                <label for="Cantidad">Cantidad</label>
                <InputNumber @bind-Value="Detalle.Cantidad" class="form-control" />
                <ValidationMessage For="@(() => Detalle.Cantidad)" />
                <button type="button"class="btn btn-success" @onclick="AgregarDetalle" ><span class="oi oi-plus"></span>AGREGAR</button>
          </div>

            @*Tabla detalle*@
         <div class="table">
             <table class="table">
                    <thead>
                        <tr>
                            <th>Producto</th>
                            <th>Descripcion</th>
                            <th>Cantidad</th>
                        </tr>
                    </thead>
                        <tbody>
                            @foreach (var detalle in caja.cajaDetalle)
                            {
                                <tr>
                                    <td>@detalle.ProductoId</td>
                                    <td>@productoBLL.Buscar(detalle.ProductoId).Descripcion</td>
                                    <td>@detalle.Cantidad</td>
                                    <td> <button name="Btn" id="Btn" class="btn btn-danger mr-2" @onclick=@(() => RemoverDetalle(detalle))> <span class="oi oi-trash"></span></button>
                                </td>
                                </tr>
                                
                            }
                        </tbody>
                </table>
            </div>
            <label>Total = @caja.Cantidad</label>
         
         @*Producidos*@
             <div class="modal-header">
            <h2>Producidos</h2>
            </div>
                <div class="form-group">
                    <label>Producto: </label><br>
                    <InputSelect class="form-select" @bind-Value="caja.ProductoId">
                        @foreach (Producto item in productoBLL.GetList(o => true).Where(o => o.ProductoId == 6))
                        {
                            <option value="@item.ProductoId">@item.Descripcion</option>
                        }
                    </InputSelect>
                </div>

                <div class="form-group">
                    <label>Cantidad: </label><br>
                    <InputNumber @bind-Value="caja.Cantidad" class="form-control" />
                </div>
            </div>


    </div>  
        <div class="text-center">
            <button type="button" class="btn btn-primary" @onclick="Nuevo"> <span class="oi oi-file"></span> Nuevo </button>
            <button type="submit" class="btn btn-success"><span class="oi oi-document"></span> Guardar</button>
            <button type="button" class="btn btn-danger" @onclick="Eliminar"><span class="oi oi-trash"></span> Eliminar</button>
        </div>
    </div>

</EditForm>

@code { 

[Parameter]

   public int cajaId{get; set;}
   public Caja caja {get; set;} = new Caja();
   public Producto producto { get; set; } = new Producto();
   public CajaDetalle Detalle = new CajaDetalle();
   protected override void OnInitialized()
   {
       if(cajaId > 0){
           caja.CajaId = cajaId;
           Buscar();
       }
   }
    public void Buscar()
    {
        if (caja.CajaId > 0)
        {
            ShowNotification(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Se ha encontrado con exito."
                    });
            var encontrado = cajaBLL.Buscar(caja.CajaId);
            Nuevo();
            if (encontrado != null)
                this.caja = encontrado;
        }
    }
  public void Nuevo(){
       this.caja = new Caja();
   }
   
    public void Guardar()
    {
        if (ValidarProducto())
        {
            var guardado = cajaBLL.Guardar(caja);

            if (guardado)
            {
                ShowNotification(
                    new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Guardado con éxito."
                        });
                Nuevo();
            }
            else
            {
                ShowNotification(
                    new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Summary = "Guardado con éxito."
                        });
                Nuevo(); 
            }
        }
    }
    public bool ValidarProducto()
    {
        if (!String.IsNullOrEmpty(caja.Concepto))
        {
            return true;
        }
        return false;
    }

public void Eliminar()
{
    if (caja != null && caja.CajaId > 0)
    {
        if (cajaBLL.Eliminar(caja.CajaId))
        {
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Se ha eliminado con éxito."
            });

            Nuevo();
        }
        else
        {
            ShowNotification(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error, no se pudo eliminar el elemento."
            });
        }
    }
    else
    {
        ShowNotification(new NotificationMessage
        {
            Severity = NotificationSeverity.Error,
            Summary = "Error, no hay elementos para eliminar."
        });
    }
}

public void AgregarDetalle()
{
        if (Detalle?.Cantidad > 0 && Detalle?.ProductoId != null)
        {
            var producto = productoBLL.Buscar(Detalle.ProductoId);
            if(Detalle.Cantidad <= producto?.Existencia)
            {
                caja.cajaDetalle.Add(Detalle);               
                caja.Cantidad += Detalle.Cantidad;               
                Detalle = new CajaDetalle();
            }
            else
            {
                ShowNotification(
                        new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Ha ocurrido un error al agregar al detalle.",
                        } 
                );
            }


        }
    }

private void RemoverDetalle(CajaDetalle item) 
    {

        this.caja.cajaDetalle.Remove(item);

    }

public void EliminarDetalle(int detalleId)
    {
        if (caja.cajaDetalle != null && detalleId > 0)
        {
            caja.cajaDetalle.RemoveAll(o => o.CajaDetalleId == detalleId);
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Info,
                    Summary = "Se ha eliminado con exito."
                }
            );
        }
    }

    public void ShowNotification(NotificationMessage message)
    {
        Notificacion.Notify(message);
    } 

}